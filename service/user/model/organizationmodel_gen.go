// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	organizationFieldNames          = builder.RawFieldNames(&Organization{})
	organizationRows                = strings.Join(organizationFieldNames, ",")
	organizationRowsExpectAutoSet   = strings.Join(stringx.Remove(organizationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	organizationRowsWithPlaceHolder = strings.Join(stringx.Remove(organizationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrganizationIdPrefix = "cache:organization:id:"
)

type (
	organizationModel interface {
		Insert(ctx context.Context, data *Organization) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Organization, error)
		Update(ctx context.Context, data *Organization) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrganizationModel struct {
		sqlc.CachedConn
		table string
	}

	Organization struct {
		Id         int64     `db:"id"`
		Name       string    `db:"name"` // 组织名
		Desc       string    `db:"desc"` // 描述
		ParentId   int64     `db:"parentId"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newOrganizationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrganizationModel {
	return &defaultOrganizationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`organization`",
	}
}

func (m *defaultOrganizationModel) Delete(ctx context.Context, id int64) error {
	organizationIdKey := fmt.Sprintf("%s%v", cacheOrganizationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, organizationIdKey)
	return err
}

func (m *defaultOrganizationModel) FindOne(ctx context.Context, id int64) (*Organization, error) {
	organizationIdKey := fmt.Sprintf("%s%v", cacheOrganizationIdPrefix, id)
	var resp Organization
	err := m.QueryRowCtx(ctx, &resp, organizationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", organizationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizationModel) Insert(ctx context.Context, data *Organization) (sql.Result, error) {
	organizationIdKey := fmt.Sprintf("%s%v", cacheOrganizationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, organizationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Desc, data.ParentId)
	}, organizationIdKey)
	return ret, err
}

func (m *defaultOrganizationModel) Update(ctx context.Context, data *Organization) error {
	organizationIdKey := fmt.Sprintf("%s%v", cacheOrganizationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, organizationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Desc, data.ParentId, data.Id)
	}, organizationIdKey)
	return err
}

func (m *defaultOrganizationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrganizationIdPrefix, primary)
}

func (m *defaultOrganizationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", organizationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrganizationModel) tableName() string {
	return m.table
}
